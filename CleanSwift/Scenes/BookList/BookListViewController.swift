//
//  BookListViewController.swift
//  CleanSwift
//
//  Created by 이기완 on 2020/06/29.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol BookListDisplayLogic: class {
    func displayBookLists(viewModel: BookList.FetchBooks.ViewModel)
}

class BookListViewController: UIViewController, BookListDisplayLogic {

    var interactor: BookListBusinessLogic?
    var router: (NSObjectProtocol & BookListRoutingLogic & BookListDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = BookListInteractor()
        let presenter = BookListPresenter()
        let router = BookListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
                
            }
        }
    }
    
    
    var displayedBooks: [Book]?
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        requestBookList()
    }
    
    // MARK: - Do something
    
    @IBOutlet weak var tableView: UITableView!
    
    func requestBookList() {
        let request = BookList.FetchBooks.Request()
        interactor?.requestBookList(request: request)
    }
    
    func displayBookLists(viewModel: BookList.FetchBooks.ViewModel) {
        self.displayedBooks = viewModel.displayedBooks
        self.tableView.reloadData()
    }

    
}

extension BookListViewController: UITableViewDataSource, UITableViewDelegate {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return displayedBooks?.count ?? 0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let displayedBook = displayedBooks![indexPath.row]
        let cell = tableView.dequeueReusableCell(withIdentifier: "BookListCell", for: indexPath) as! BookListTableViewCell
        cell.titleLabel.text = displayedBook.title
        cell.descriptionLabel.text = displayedBook.description
        
        return cell
        
    }
    
}
