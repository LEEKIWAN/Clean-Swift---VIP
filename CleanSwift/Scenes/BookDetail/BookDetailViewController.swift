//
//  BookDetailViewController.swift
//  CleanSwift
//
//  Created by kiwan on 2020/07/01.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol BookDetailDisplayLogic: class {
    func displayBookDetail(viewModel: BookDetail.FetchBook.ViewModel)
}

class BookDetailViewController: UIViewController, BookDetailDisplayLogic {
    var interactor: BookDetailBusinessLogic?
    var router: (NSObjectProtocol & BookDetailRoutingLogic & BookDetailDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = BookDetailInteractor()
        let presenter = BookDetailPresenter()
        let router = BookDetailRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        requestBookDetail()
    }
    
    // MARK: Do something
    
    @IBOutlet weak var titleLabel: UILabel!
    @IBOutlet weak var descriptionLabel: UILabel!
    
    func requestBookDetail() {
        let request = BookDetail.FetchBook.Request(id: router!.dataStore!.book!.id)
        interactor?.requestBookDetail(request: request)
    }
    
    func displayBookDetail(viewModel: BookDetail.FetchBook.ViewModel) {
        //nameTextField.text = viewModel.name
        
        titleLabel.text = viewModel.book.title
        descriptionLabel.text = viewModel.book.description
    }
}
